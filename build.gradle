import java.text.SimpleDateFormat

plugins {
    id 'java'
    id 'signing'
    id 'eclipse'
    id 'jacoco'
    id 'maven-publish'
    id 'org.asciidoctor.jvm.convert' version '2.4.0'
    id 'net.minecrell.licenser' version '0.4.1'
    id 'net.nemerosa.versioning' version '2.10.0'
}

group = 'net.reini'

defaultTasks 'build'

Date buildTimeAndDate = new Date()
ext {
    buildDate = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildTime = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
}

configurations {
    asciidoclet
}

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    implementation "org.slf4j:slf4j-api:1.7.30"
    implementation "javax.enterprise:cdi-api:2.0-PFD2"
    testImplementation "junit:junit:4.13"
    testImplementation "org.hamcrest:hamcrest-core:2.2"
    testImplementation "org.jmockit:jmockit:1.49"
    testImplementation "org.easymock:easymock:4.1"
    asciidoclet 'org.asciidoctor:asciidoclet:1.+'
}

task sourcesJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

signing {
    required { project.hasProperty('signing.password') && !project.version.endsWith('-SNAPSHOT') }
    sign configurations.archives
}

jar {
    manifest {
        attributes 'Implementation-Title': 'SLF4J CDI injection providers',
                   'Implementation-Version': version,
                   'Created-By': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})".toString(),
                   'Build-Date': buildDate,
                   'Build-Time': buildTime,
                   'Build-Revision': versioning.info.commit,
                   'Automatic-Module-Name': "org.slf4j.cdi"
        metaInf {
            from file('.')
            include 'LICENSE'
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

check.dependsOn jacocoTestReport

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = 'SLF4J CDI injection providers'
                description = 'Provides partial backwards compatibility classes in order to more easier migrate to a newer JUnit version.'
                url = 'https://github.com/reinhapa/slf4j-cdi'
                scm {
                    connection = 'scm:git:git@github.com:reinhapa/slf4j-cdi.git'
                    developerConnection = 'scm:git:git@github.com:reinhapa/slf4j-cdi.git'
                    url = 'https://github.com/reinhapa/slf4j-cdi.git'
                }
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'http://www.opensource.org/licenses/mit-license.php'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'reinhapa'
                        name = 'Patrick Reinhart'
                        email = 'patrick@reini.net'
                    }
                }
            }
        }
    }
    repositories {
        if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {
            maven {
                def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username = ossrhUsername
                    password = ossrhPassword
                }
            }
        }
    }
}
