/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2017-2025 Patrick Reinhart
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge, publish, distribute,
 * sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
 * NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
plugins {
  id 'eclipse'
  id 'java-library'
  id 'com.diffplug.spotless' version '6.25.0'
  id 'org.owasp.dependencycheck' version '11.1.1'
  id 'org.kordamp.gradle.java-project' version '0.54.0'
}

group = 'net.reini'

apply {
  plugin 'org.kordamp.gradle.checkstyle'
  plugin 'org.kordamp.gradle.errorprone'
  plugin 'org.kordamp.gradle.sonar'
}

if (!project.hasProperty('sonatypeUsername')) ext.sonatypeUsername = '**undefined**'
if (!project.hasProperty('sonatypePassword')) ext.sonatypePassword = '**undefined**'
if (!project.hasProperty('sonarToken')) ext.sonarToken = '**undefined**'

java {
  sourceCompatibility = JavaVersion.VERSION_21
}

repositories {
  mavenCentral()
}

configurations {
    asciidoclet
}

dependencies {
    compileOnly 'org.slf4j:slf4j-api:2.0.16'
    compileOnly 'jakarta.enterprise:jakarta.enterprise.cdi-api:4.1.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.11.4'
    testImplementation 'org.easymock:easymock:5.5.0'
    asciidoclet 'org.asciidoctor:asciidoclet:2.+'
}

jar {
  manifest.attributes 'Automatic-Module-Name': 'net.slf4j.cdi'
}

spotless {
  java {
    eclipse().configFile('gradle/code-style.xml')
    importOrderFile('gradle/code.importorder')
  }
}

test {
  useJUnitPlatform()
}

dependencyUpdates.resolutionStrategy {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'b', 'pr', 'ea'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-+]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}

config {
  release = !project.version.toString().endsWith('-SNAPSHOT')
  info {
    vendor = 'reinhapa'
    name = 'SLF4J CDI injection providers'
    description = 'Provides partial backwards compatibility classes in order to more easier migrate to a newer JUnit version.'
    inceptionYear = '2017'
    links {
      website = 'https://github.com/reinhapa/slf4j-cdi'
      issueTracker = 'https://github.com/reinhapa/slf4j-cdi/issues'
      scm = 'https://github.com/reinhapa/slf4j-cdi'
    }
    scm {
      connection = 'scm:git://github.com/reinhapa/slf4j-cdi.git'
      developerConnection = 'scm:git://github.com/reinhapa/slf4j-cdi.git'
      url = 'https://github.com/reinhapa/slf4j-cdi'
    }
    people {
      person {
        id = 'reinhapa'
        name = 'Patrick Reinhart'
        email = 'patrick@reini.net'
        roles = [ 'developer' ]
      }
    }
    repositories {
      repository {
        name = 'sonatypeRelease'
        url  = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
        credentials {
          username = sonatypeUsername
          password = sonatypePassword
        }
      }
      repository {
        name = 'sonatypeSnapshot'
        url  = 'https://oss.sonatype.org/content/repositories/snapshots/'
        credentials {
          username = sonatypeUsername
          password = sonatypePassword
        }
      }
    }
  }
  quality {
    errorprone {
      errorProneVersion = '2.16'
    }
    sonar {
      hostUrl = 'https://sonarcloud.io'
      login = sonarToken
      organization = 'reinhapa'
      projectKey = 'reinhapa_slf4j_cdi'
    }
  }
  licensing {
    licenses {
      license {
        id = 'MIT'
      }
    }
  }
  docs {
    javadoc {
      autoLinks.enabled = false
      options {
        docTitle = "Virtual Printers ${project.version} API"
        header = "Virtual Printers ${project.version} API"
        windowTitle = "Virtual Printers ${project.version} API"
      }
    }
  }
  artifacts {
    minpom.enabled = false
  }
  publishing {
    signing {
      enabled = release
      secretKey = project.hasProperty('signingKey') ? signingKey : null
      password = project.hasProperty('signingPassword') ? signingPassword : null
    }
    releasesRepository  = 'sonatypeRelease'
    snapshotsRepository = 'sonatypeSnapshot'
  }
}

normalization {
  runtimeClasspath {
    ignore('/META-INF/MANIFEST.MF')
  }
}
